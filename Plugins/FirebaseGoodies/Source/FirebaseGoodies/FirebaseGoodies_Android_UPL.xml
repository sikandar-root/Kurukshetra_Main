<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright (c) 2022 Nineva Studios
-->
<root xmlns:android="http://schemas.android.com/apk/res/android">

    <init>
        <log text="[FirebaseGoodies] Android UPL initialization"/>

        <setStringFromProperty result="GoogleServicesJsonPathToEdit" ini="Engine" section="/Script/FirebaseGoodies.FirebaseGoodiesSettings" property="GoogleServicesJsonPath"/>
        <!-- See https://firebase.google.com/docs/android/learn-more#bom -->
        <setStringFromProperty result="BomVersion" ini="Engine" section="/Script/FirebaseGoodies.FirebaseGoodiesSettings" property="BomVersion" default="32.7.2"/>
        <setBoolFromProperty result="IsGoogleServicesJsonInThePluginRootFolder" ini="Engine" section="/Script/FirebaseGoodies.FirebaseGoodiesSettings" property="bIsGoogleServicesJsonInThePluginRootFolder" default="false"/>
        <setBoolFromProperty result="IsUE4" ini="Engine" section="/Script/FirebaseGoodies.FirebaseGoodiesSettings" property="bUseUE4" default="false"/>
        <setBoolFromProperty result="AlsoCopyServicesJsonToAFSProject" ini="Engine" section="/Script/FirebaseGoodies.FirebaseGoodiesSettings" property="bCopyServicesJsonToAFSProject" default="false"/>
        <setBoolFromProperty result="UseCustomGradle" ini="Engine" section="/Script/FirebaseGoodies.FirebaseGoodiesSettings" property="bUseGradleVersionFromPlugin" default="true"/>
        <setStringReplace result="HalfwayEditedGoogleServicesJsonPath" source="$S(GoogleServicesJsonPathToEdit)" find="(FilePath=&quot;" with=""/>
        <setStringReplace result="GoogleServicesJsonPath" source="$S(HalfwayEditedGoogleServicesJsonPath)" find="&quot;)" with=""/>

        <setBoolFromProperty result="EnableCrashlyticsUploadDebug" ini="Engine" section="/Script/FirebaseGoodies.FirebaseGoodiesSettings" property="bUploadSymbolsDebugAndroid" default="false"/>
        <setBoolFromProperty result="EnableCrashlyticsUploadRelease" ini="Engine" section="/Script/FirebaseGoodies.FirebaseGoodiesSettings" property="bUploadSymbolsReleaseAndroid" default="false"/>

        <!-- https://firebase.google.com/docs/analytics/configure-data-collection?platform=android  -->
        <setBoolFromProperty result="AnalyticsCollectionEnabled" ini="Engine" section="/Script/FirebaseGoodies.FirebaseGoodiesSettings" property="bAnalyticsCollectionEnabled" default="true"/>
        <setBoolFromProperty result="AnalyticsCollectionDeactivated" ini="Engine" section="/Script/FirebaseGoodies.FirebaseGoodiesSettings" property="bAnalyticsCollectionDeactivated" default="false"/>
        <setBoolFromProperty result="AdvertisingIdCollectionEnabled" ini="Engine" section="/Script/FirebaseGoodies.FirebaseGoodiesSettings" property="bAdvertisingIdCollectionEnabled" default="true"/>
        <setBoolFromProperty result="SSAIDCollectionEnabled" ini="Engine" section="/Script/FirebaseGoodies.FirebaseGoodiesSettings" property="bSSAIDCollectionEnabled" default="true"/>
        <setBoolFromProperty result="AllowAdPersonalizationSignals" ini="Engine" section="/Script/FirebaseGoodies.FirebaseGoodiesSettings" property="bAllowAdPersonalizationSignals" default="true"/>

        <!-- TODO add programmatic access -->
        <log text="[FirebaseGoodies] AnalyticsCollectionEnabled: $B(AnalyticsCollectionEnabled)"/>
        <log text="[FirebaseGoodies] AnalyticsCollectionDeactivated: $B(AnalyticsCollectionDeactivated)"/>
        <log text="[FirebaseGoodies] AdvertisingIdCollectionEnabled: $B(AdvertisingIdCollectionEnabled)"/>
        <log text="[FirebaseGoodies] SSAIDCollectionEnabled: $B(SSAIDCollectionEnabled)"/>
        <log text="[FirebaseGoodies] AllowAdPersonalizationSignals: $B(AllowAdPersonalizationSignals)"/>

        <setBoolNot result="notDistribution" source="$B(Distribution)"/>
        <setBoolAnd result="UploadDebugSymbols" arg1="$B(EnableCrashlyticsUploadDebug)" arg2="$B(notDistribution)"/>
        <setBoolAnd result="UploadReleaseSymbols" arg1="$B(EnableCrashlyticsUploadRelease)" arg2="$B(Distribution)"/>

        <setStringFromProperty result="AndroidPackageName" ini="Engine" section="/Script/AndroidRuntimeSettings.AndroidRuntimeSettings" property="PackageName" default=""/>

        <setBoolIsEqual result="bEngineMajorVersionEqual5" arg1="$I(EngineMajorVersion)" arg2="5" />
        <setBoolIsGreaterEqual result="bEngineMinorVersionGreaterEqual5" arg1="$I(EngineMinorVersion)" arg2="5" />

        <setBoolAnd result="bEngineVersionIs5point5orHigher" arg1="$B(bEngineMajorVersionEqual5)" arg2="$B(bEngineMinorVersionGreaterEqual5)"/>

        <!--  Is it UE5 ? -->
        <log text="[FirebaseGoodies] Engine location: $S(EngineDir)"/>
        <log text="[FirebaseGoodies] Android package: $S(AndroidPackageName)"/>

        <log text="[FirebaseGoodies] Google Services Json Path: $S(GoogleServicesJsonPath)"/>
        <log text="[FirebaseGoodies] Android Firebase BoM Version: $S(BomVersion)"/>
    </init>

    <prebuildCopies>
        <if condition="IsGoogleServicesJsonInThePluginRootFolder">
            <true>
                <log text="[FirebaseGoodies] google-services.json will be taken from your plugin directory. Ensure it exists right next to the FirebaseGoodies_Android_UPL.xml file."/>
                <copyFile src="$S(PluginDir)/google-services.json" dst="$S(BuildDir)/gradle/app/google-services.json" force="true"/>
                <if condition="AlsoCopyServicesJsonToAFSProject">
                    <true>
                        <copyFile src="$S(PluginDir)/google-services.json" dst="$S(BuildDir)/gradle/AFSProject/app/google-services.json" force="true"/>
                    </true>
                </if>
            </true>
            <false>
                <copyFile src="$S(GoogleServicesJsonPath)" dst="$S(BuildDir)/gradle/app/google-services.json" force="true"/>
                <if condition="AlsoCopyServicesJsonToAFSProject">
                    <true>
                        <copyFile src="$S(GoogleServicesJsonPath)" dst="$S(BuildDir)/gradle/AFSProject/app/google-services.json" force="true"/>
                    </true>
                </if>
            </false>
        </if>

        <!--  Copy java and gradle files-->
        <copyDir src="$S(PluginDir)/Private/Java" dst="$S(BuildDir)/src/com/ninevastudios/unrealfirebase"/>
        <copyDir src="$S(PluginDir)/Private/Java_UE5" dst="$S(BuildDir)/src/com/ninevastudios/unrealfirebase"/>

        <!-- UE4 is no longer supported - do not break things for UE5 user that build from source, this is left for history or if someone needs to backport to UE4       -->
        <if condition="IsUE4">
            <true>
                <log text="[FirebaseGoodies] We are in UE4..."/>
                <copyDir src="$S(PluginDir)/Private/Java_UE4" dst="$S(BuildDir)/src/com/ninevastudios/unrealfirebase"/>
            </true>
            <false>
                <log text="[FirebaseGoodies] We are in UE5..."/>
                <copyDir src="$S(PluginDir)/Private/Java_UE5" dst="$S(BuildDir)/src/com/ninevastudios/unrealfirebase"/>
            </false>
        </if>

        <if condition="UseCustomGradle">
            <true>
                <log text="[FirebaseGoodies] Using custom gradle version, see UPL file for details, disable this in plugin settings if UE using 5.3+..."/>
                <copyDir src="$S(PluginDir)/Private/Gradle" dst="$S(BuildDir)/gradle/gradle"/>
            </true>
        </if>
    </prebuildCopies>

    <gradleProperties>
        <insert>
            android.useAndroidX=true
            android.enableJetifier=true
        </insert>
    </gradleProperties>

    <!-- optional additions to proguard -->
    <proguardAdditions>
        <insert>
            -dontwarn com.ninevastudios.**
            -keep class com.ninevastudios.** { *; }
            -keep interface com.ninevastudios.** { *; }

            -dontwarn com.google.firebase.**
            -keep class com.google.firebase.** { *; }
            -keep interface com.google.firebase.** { *; }

            -dontwarn com.google.android.gms.**
            -keep class com.google.android.gms.** { *; }
            -keep interface com.google.android.gms.** { *; }
        </insert>
    </proguardAdditions>

    <!-- optional updates applied to AndroidManifest.xml -->
    <androidManifestUpdates>
        <if condition="AnalyticsCollectionEnabled">
            <true>
                <addElements tag="application">
                    <meta-data android:name="firebase_analytics_collection_enabled" android:value="true"/>
                </addElements>
            </true>
            <false>
                <addElements tag="application">
                    <meta-data android:name="firebase_analytics_collection_enabled" android:value="false"/>
                </addElements>
            </false>
        </if>

        <if condition="AnalyticsCollectionDeactivated">
            <true>
                <addElements tag="application">
                    <meta-data android:name="firebase_analytics_collection_deactivated" android:value="true"/>
                </addElements>
            </true>
            <false>
                <addElements tag="application">
                    <meta-data android:name="firebase_analytics_collection_deactivated" android:value="false"/>
                </addElements>
            </false>
        </if>

        <if condition="AdvertisingIdCollectionEnabled">
            <true>
                <addPermission android:name="com.google.android.gms.permission.AD_ID"/>
                <addElements tag="application">
                    <meta-data android:name="google_analytics_adid_collection_enabled" android:value="true"/>
                </addElements>
            </true>
            <false>
                <addElements tag="application">
                    <meta-data android:name="google_analytics_adid_collection_enabled" android:value="false"/>
                </addElements>
            </false>
        </if>

        <if condition="SSAIDCollectionEnabled">
            <true>
                <addElements tag="application">
                    <meta-data android:name="google_analytics_ssaid_collection_enabled" android:value="true"/>
                </addElements>
            </true>
            <false>
                <addElements tag="application">
                    <meta-data android:name="google_analytics_ssaid_collection_enabled" android:value="false"/>
                </addElements>
            </false>
        </if>

        <if condition="AllowAdPersonalizationSignals">
            <true>
                <addElements tag="application">
                    <meta-data android:name="google_analytics_default_allow_ad_personalization_signals" android:value="true"/>
                </addElements>
            </true>
            <false>
                <addElements tag="application">
                    <meta-data android:name="google_analytics_default_allow_ad_personalization_signals" android:value="false"/>
                </addElements>
            </false>
        </if>

        <!-- Cloud messaging, TODO: make configurable  -->
        <addPermission android:name="android.permission.POST_NOTIFICATIONS"/>
        
        <setElement result="Permission" value="permission"/>
        <addAttribute tag="$Permission" name="android:name" value="$S(AndroidPackageName).permission.C2D_MESSAGE"/>
        <addAttribute tag="$Permission" name="android:protectionLevel" value="signature"/>
        <addElement tag="manifest" name="Permission"/>
        
        <setElement result="UsesPermission" value="uses-permission"/>
        <addAttribute tag="$UsesPermission" name="android:name" value="$S(AndroidPackageName).permission.C2D_MESSAGE"/>
        <addElement tag="manifest" name="UsesPermission"/>

        <addElements tag="application">
            <!-- You can change the default notification icon here, it must be a part of your android app inside res/drawable folder of the Android project -->
            <meta-data android:resource="@drawable/icon" android:name="com.google.firebase.messaging.default_notification_icon"/>
        </addElements>
        
        <addElements tag="application">
            <activity android:name="com.ninevastudios.unrealfirebase.FGAuthIntermediateActivity" android:theme="@android:style/Theme.Translucent.NoTitleBar" android:exported="false"/>
            <service android:name="com.ninevastudios.unrealfirebase.FGMessageReceiver" android:exported="false">
                <intent-filter>
                    <action android:name="com.google.firebase.MESSAGING_EVENT"/>
                </intent-filter>
            </service>
        </addElements>

        <!-- See https://firebase.google.com/docs/crashlytics/ndk-reports -->
        <addAttribute tag="application" name="android:allowNativeHeapPointerTagging" value="false"/>
    </androidManifestUpdates>

    <buildscriptGradleAdditions>
        <if condition="bEngineVersionIs5point5orHigher">
            <true>
                <insert>
                    dependencies {
                        classpath 'com.google.gms:google-services:4.4.1'
                        classpath 'com.google.firebase:firebase-crashlytics-gradle:3.0.2'
                    }
                </insert>
            </true>
            <false>
                <insert>
                    dependencies {
                        classpath 'com.google.gms:google-services:4.4.1'
                        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.9.9'
                    }
                </insert>
            </false>
        </if>

    </buildscriptGradleAdditions>

    <buildGradleAdditions>
        <insert>
            android {
            compileOptions {
            targetCompatibility JavaVersion.VERSION_1_8
            sourceCompatibility JavaVersion.VERSION_1_8
            }
            }

            dependencies {
        </insert>
        <insertValue value="implementation platform('com.google.firebase:firebase-bom:$S(BomVersion)')"/>
        <insertNewline/>
        <insert>
            implementation 'com.google.firebase:firebase-analytics'
            implementation 'com.google.firebase:firebase-config'
            implementation 'com.google.firebase:firebase-database'
            implementation 'com.google.firebase:firebase-storage:'
            implementation 'com.google.firebase:firebase-auth'
            implementation 'com.google.firebase:firebase-crashlytics'
            implementation 'com.google.firebase:firebase-crashlytics-ndk'
            implementation 'com.google.firebase:firebase-messaging'
            implementation 'com.google.firebase:firebase-functions'
            implementation 'com.google.firebase:firebase-firestore'
            implementation 'com.google.firebase:firebase-dynamic-links'
            }

            repositories {
            maven { url 'https://maven.google.com' }
            google()
            }
            apply plugin: 'com.google.gms.google-services'
            apply plugin: 'com.google.firebase.crashlytics'
        </insert>

        <if condition="UploadDebugSymbols">
            <true>
                <log text="[FirebaseGoodies] Crashlytics debug symbols upload enabled. Adding native libraries..."/>
                <insert>
                    android {
                    buildTypes {
                    debug {
                    firebaseCrashlytics {
                    nativeSymbolUploadEnabled true
                    unstrippedNativeLibsDir "$projectDir/build/intermediates/merged_native_libs/debug/out/lib"
                    symbolGenerator {
                    breakpad()
                    }
                    }
                    }
                    }
                    }

                    tasks.whenTaskAdded { task ->
                    if (task.name == 'mergeDebugNativeLibs') {
                    task.finalizedBy 'uploadCrashlyticsSymbolFileDebug'
                    }
                    }
                </insert>
            </true>
        </if>

        <if condition="UploadReleaseSymbols">
            <true>
                <log text="[FirebaseGoodies] Crashlytics release symbols upload enabled. Adding native libraries..."/>
                <insert>
                    android {
                    buildTypes {
                    release {
                    firebaseCrashlytics {
                    nativeSymbolUploadEnabled true
                    unstrippedNativeLibsDir "$projectDir/build/intermediates/merged_native_libs/release/out/lib"
                    symbolGenerator {
                    breakpad()
                    }
                    }
                    }
                    }
                    }

                    tasks.whenTaskAdded { task ->
                    if (task.name == 'mergeReleaseNativeLibs') {
                    task.finalizedBy 'uploadCrashlyticsSymbolFileRelease'
                    }
                    }
                </insert>
            </true>
        </if>
    </buildGradleAdditions>


    <baseBuildGradleAdditions>
        <insert>
            allprojects {
            def mappings = [
            'android.arch.lifecycle.Lifecycle': 'androidx.lifecycle.Lifecycle',
            'android.arch.lifecycle.LifecycleObserver': 'androidx.lifecycle.LifecycleObserver',
            'android.arch.lifecycle.OnLifecycleEvent': 'androidx.lifecycle.OnLifecycleEvent',
            'android.arch.lifecycle.ProcessLifecycleOwner': 'androidx.lifecycle.ProcessLifecycleOwner',
            'android.arch.lifecycle': 'androidx.lifecycle',
            'android.support.annotation': 'androidx.annotation',
            'android.support.v13.app.FragmentCompat': 'androidx.legacy.app.FragmentCompat',
            'android.support.v4.app.ActivityCompat': 'androidx.core.app.ActivityCompat',
            'android.support.v4.app.NotificationCompat': 'androidx.core.app.NotificationCompat',
            'android.support.v4.app.NotificationManagerCompat': 'androidx.core.app.NotificationManagerCompat',
            'android.support.v4.content.ContextCompat': 'androidx.core.content.ContextCompat',
            'android.support.v4.content.FileProvider': 'androidx.core.content.FileProvider',
            ]

            beforeEvaluate { project ->
            project.rootProject.projectDir.traverse(type: groovy.io.FileType.FILES, nameFilter: ~/.*\.java$/) { f ->
            mappings.each { entry ->
            if (f.getText('UTF-8').contains(entry.key)) {
            println "Updating ${entry.key} to ${entry.value} in file ${f}"
            ant.replace(file: f, token: entry.key, value: entry.value)
            }
            }
            }
            }
            }
        </insert>
    </baseBuildGradleAdditions>

    <buildscriptGradleAdditions>
        <insert>
            dependencies {
            classpath 'com.android.tools.build:gradle:7.4.2'
            }
        </insert>
    </buildscriptGradleAdditions>

    <!-- Fixees for onNewToken() crash, sometimes the method is invoked before the C++ part is initialized -->
    <gameActivityClassAdditions>
        <insert>
            private boolean _ninevaIsResumed;

            public boolean ninevaIsResumed() {
            return _ninevaIsResumed;
            }
        </insert>
    </gameActivityClassAdditions>

    <gameActivityOnPauseAdditions>
        <insert>
            _ninevaIsResumed = false;
        </insert>
    </gameActivityOnPauseAdditions>

    <gameActivityOnResumeAdditions>
        <insert>
            _ninevaIsResumed = true;
        </insert>
    </gameActivityOnResumeAdditions>

    <gameActivityImportAdditions>
        <insert>
            import com.ninevastudios.unrealfirebase.FGAuth;
        </insert>
    </gameActivityImportAdditions>

    <gameActivityOnActivityResultAdditions>
        <insert>
            FGAuth.processSignInWithGoogleResult(requestCode, resultCode, data);
        </insert>
    </gameActivityOnActivityResultAdditions>
</root>
